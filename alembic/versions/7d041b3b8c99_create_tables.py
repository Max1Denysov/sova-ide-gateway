"""Create tables

Revision ID: 7d041b3b8c99
Revises: 
Create Date: 2020-10-18 12:58:24.104190

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7d041b3b8c99'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('access_user_flags',
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('flags', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('complects',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('version', sa.BigInteger(), nullable=False),
    sa.Column('state', postgresql.ENUM('active', 'inactive', name='status'), nullable=False),
    sa.Column('profile_ids', postgresql.ARRAY(postgresql.UUID()), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('is_enabled', sa.Boolean(), server_default='t', nullable=False),
    sa.Column('compiler_target', sa.String(), server_default='', nullable=False),
    sa.Column('debug_target', sa.String(), server_default='', nullable=False),
    sa.Column('deploy_target', sa.String(), server_default='', nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('dictionaries',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('version', sa.BigInteger(), nullable=False),
    sa.Column('state', postgresql.ENUM('active', 'inactive', name='status'), nullable=False),
    sa.Column('kind', sa.TEXT(), server_default='match', nullable=False),
    sa.Column('title', sa.TEXT(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=False),
    sa.Column('content', sa.TEXT(), nullable=False),
    sa.Column('common', sa.Boolean(), nullable=False),
    sa.Column('hidden', sa.Boolean(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('profile_ids', postgresql.ARRAY(postgresql.UUID()), server_default=sa.text('ARRAY[]::UUID[]'), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), server_default='t', nullable=False),
    sa.Column('parts', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dictionaries_versions',
    sa.Column('version_id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('id', postgresql.UUID(), nullable=True),
    sa.Column('created', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('version', sa.BigInteger(), nullable=True),
    sa.Column('state', sa.TEXT(), nullable=True),
    sa.Column('kind', sa.TEXT(), nullable=True),
    sa.Column('title', sa.TEXT(), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('content', sa.TEXT(), nullable=True),
    sa.Column('common', sa.Boolean(), nullable=True),
    sa.Column('hidden', sa.Boolean(), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('profile_ids', postgresql.ARRAY(postgresql.UUID()), nullable=True),
    sa.Column('is_enabled', sa.Boolean(), nullable=True),
    sa.Column('parts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_table('profiles',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('version', sa.BigInteger(), nullable=False),
    sa.Column('state', postgresql.ENUM('active', 'inactive', name='status'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('common', sa.Boolean(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('is_enabled', sa.Boolean(), server_default='t', nullable=False),
    sa.Column('engine_id', sa.Integer(), server_default='1', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('version', sa.BigInteger(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('access_complect_account',
    sa.Column('account_id', postgresql.UUID(), nullable=False),
    sa.Column('complect_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['complect_id'], ['complects.id'], ),
    sa.PrimaryKeyConstraint('account_id', 'complect_id')
    )
    op.create_table('access_profile_account',
    sa.Column('account_id', postgresql.UUID(), nullable=False),
    sa.Column('profile_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.PrimaryKeyConstraint('account_id', 'profile_id')
    )
    op.create_table('access_profile_user',
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('profile_id', postgresql.UUID(), nullable=False),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'profile_id')
    )
    op.create_table('suites',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('profile_id', postgresql.UUID(), nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('version', sa.BigInteger(), nullable=False),
    sa.Column('state', postgresql.ENUM('active', 'inactive', name='status'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('hidden', sa.Boolean(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('testcase',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('profile_id', postgresql.UUID(), nullable=True),
    sa.Column('title', sa.TEXT(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('replicas', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('is_common', sa.Boolean(), nullable=False),
    sa.Column('author', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('templates',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('suite_id', postgresql.UUID(), nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('version', sa.BigInteger(), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('state', postgresql.ENUM('active', 'inactive', name='status'), nullable=False),
    sa.Column('content', sa.TEXT(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('is_compilable', sa.Boolean(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.ForeignKeyConstraint(['suite_id'], ['suites.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('suite_id', 'position', name='suite_id_positions')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('templates')
    op.drop_table('testcase')
    op.drop_table('suites')
    op.drop_table('access_profile_user')
    op.drop_table('access_profile_account')
    op.drop_table('access_complect_account')
    op.drop_table('users')
    op.drop_table('profiles')
    op.drop_table('dictionaries_versions')
    op.drop_table('dictionaries')
    op.drop_table('complects')
    op.drop_table('access_user_flags')
    # ### end Alembic commands ###
